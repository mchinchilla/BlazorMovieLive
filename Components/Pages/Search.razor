@page "/search"
@using BlazorMovieLive.Models
@using BlazorMovieLive.Services
@inject TMDBClient TMDB
@inject NavigationManager Nav

<PageTitle>Blazor Movie: Search Movies</PageTitle>

<div class="container-xxl py-3">
    <div>
        <h1 class="display-6">
            <span class="text-danger">
                <i class="bi bi-fire"></i>
            </span>
            Search Movies
        </h1>
    </div>

    <div class="my-3">
        <div class="row row-cols-lg-auto g-3 align-items-center">
            <input type="text" class="form-control" placeholder="Search for a movie..." @bind-value="searchTerm" />
            <button class="btn btn-primary mt-2" @onclick="SearchMovies">Search</button>
        </div>
    </div>

    <div class="d-flex flex-column flex-md-row justify-content-between my-3">
        <div class="row row-cols-2 row-cols-lg-4 row-cols-xl-5 g-3 justify-content-center justify-content-md-start">
            @if (movies is null)
            {
                for (int i = 0; i < 10; i++)
                {
                    <div class="col">
                        <MovieCard />
                    </div>
                }
            }
            else
            {
                @foreach (PopularMovie movie in movies.Results)
                {
                    <div class="col">
                        <MovieCard Movie="movie" />
                    </div>
                }
            }
        </div>

    </div>

    @if (movies?.TotalPages > 1)
    {
        <div class="my-3">
            <Paginator CurrentPage="movies.Page"
                       TotalPages="movies.TotalPages > 500 ? 500 : movies.TotalPages"
                       OnPageChange="GetPage" />
        </div>
    }
</div>

@code {
    private PopularMoviePagedResponse? movies;

    [SupplyParameterFromQuery(Name = "query")]
    private string searchTerm { get; set; } = string.Empty;

    [SupplyParameterFromQuery]
    public int Page { get; set; } = 1;

    async Task SearchMovies()
    {
        if (Page < 1) Page = 1;
        else if (Page > 500) Page = 500;

        movies = await TMDB.GetSearchedMoviesAsync(searchTerm, Page);
    }



    protected override async Task OnParametersSetAsync()
    {
        if (Page < 1) Page = 1;
        else if (Page > 500) Page = 500;


        movies = await TMDB.GetSearchedMoviesAsync(searchTerm, Page);
    }

    private void GetPage(int pageNum)
    {
        IReadOnlyDictionary<string, object?> parameters = new Dictionary<string, object?>
        {
            { "query", searchTerm },
            { "page", pageNum }
        };

        string url = Nav.GetUriWithQueryParameters("search", parameters);
        Nav.NavigateTo(url);
    }

}